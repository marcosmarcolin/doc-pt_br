<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: 93e05c681bfdbfdd60cec941173c6fe8e8c95cf6 Maintainer: leonardolara Status: ready --><!-- CREDITS: leonardolara -->

<reference xml:id="class.swoole-coroutine-lock" role="class" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude">

 <title>A classe Swoole\Coroutine\Lock</title>
 <titleabbrev>Swoole\Coroutine\Lock</titleabbrev>

 <partintro>

<!-- {{{ Swoole\Coroutine\Lock intro -->
  <section xml:id="swoole-coroutine-lock.intro">
   &reftitle.intro;
   <para>
    O Swoole 6.0.1 introduziu um bloqueio de corrotina que suporta compartilhamento entre processos e entre threads.
    Este bloqueio foi projetado com comportamento não bloqueante e permite a sincronização eficiente de corrotinas
    em ambientes multiprocessos e multithreads.
   </para>
   <para>
    Quando compilado com a opção <literal>--enable-iouring</literal> e o kernel Linux suporta
    o recurso <literal>io_uring futex</literal>, o bloqueio de corrotina do Swoole implementa a sincronização
    usando <literal>io_uring futex</literal>. Nesse caso, as corrotinas aguardam o despertar dos bloqueios usando
    um mecanismo de enfileiramento eficiente, melhorando significativamente o desempenho.
   </para>
   <para>
    Sem <literal>io_uring futex</literal>, o bloqueio da corrotina retorna a um mecanismo de espera exponencial
    em que o tempo de espera aumenta em 2^n milissegundos (n sendo o número de falhas)
    após cada tentativa frustrada de obter o bloqueio. Embora essa abordagem evite esperas ocupadas, ela introduz
    sobrecarga e latência adicionais de escalonamento da CPU.
   </para>
   <para>
    O bloqueio da corrotina é reentrante, permitindo que a corrotina atualmente em espera execute com segurança
    múltiplas operações de bloqueio.
   </para>
   <warning>
    <para>
     Não crie bloqueios em funções de retorno como <literal>onReceive</literal>, pois isso causará
     crescimento contínuo e vazamentos de memória.
    </para>
   </warning>
   <warning>
    <para>
     O bloqueio e o desbloqueio devem ser realizados na mesma corrotina, caso contrário,
     as condições estáticas serão quebradas.
    </para>
   </warning>
  </section>
<!-- }}} -->

  <section xml:id="swoole-coroutine-lock.synopsis">
   &reftitle.classsynopsis;

<!-- {{{ Synopsis -->
   <classsynopsis>
    <ooclass><classname>Swoole\Coroutine\Lock</classname></ooclass>

<!-- {{{ Class synopsis -->
    <classsynopsisinfo>
     <ooclass>
      <classname>Swoole\Coroutine\Lock</classname>
     </ooclass>
    </classsynopsisinfo>
<!-- }}} -->

    <classsynopsisinfo role="comment">&Methods;</classsynopsisinfo>
    <xi:include xpointer="xmlns(db=http://docbook.org/ns/docbook) xpointer(id('class.swoole-coroutine-lock')/db:refentry/db:refsect1[@role='description']/descendant::db:methodsynopsis[not(@role='procedural')])" />
   </classsynopsis>
<!-- }}} -->

  </section>

  <section xml:id="swoole-coroutine-lock.examples">
   &reftitle.examples;
   <example xml:id="swoole-coroutine-lock.example.basic">
    <title>Uso básico</title>
    <programlisting role="php">
<![CDATA[
<?php
use Swoole\Coroutine\Lock;
use Swoole\Coroutine\WaitGroup;
use function Swoole\Coroutine\go;
use function Swoole\Coroutine\run;

$lock = new Lock();
$waitGroup = new WaitGroup();

run(function() use ($lock, $waitGroup) {
    go(function() use ($lock, $waitGroup) {
        $waitGroup->add();
        $lock->lock();
        sleep(1);
        $lock->unlock();
        $waitGroup->done();
    });

    go(function() use ($lock, $waitGroup) {
        $waitGroup->add();
        $lock->lock(); // Aguarda o desbloqueio da corrotina de retenção
        sleep(1);
        $lock->unlock();
        $waitGroup->done();
    });

    echo 'O bloqueio não bloqueia o processo';
    $waitGroup->wait();
});
]]>
    </programlisting>
   </example>
  </section>

 </partintro>

 &reference.swoole.swoole.coroutine.entities.lock;
</reference>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
