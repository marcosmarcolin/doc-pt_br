<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: 65f1e1978c89ba3ba24d8eff0907dedfac5fd5bb Maintainer: marcosmarcolin Status: ready --><!-- CREDITS: marcosmarcolin -->

<appendix xml:id="memcached.constants" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 &reftitle.constants;
 &extension.constants;
 <variablelist>

  <varlistentry xml:id="memcached.constants.opt-compression">
   <term><constant>Memcached::OPT_COMPRESSION</constant></term>
   <listitem>
    <para>Ativa ou desativa a compactação de payload. Quando ativado,
     os valores de itens maiores que um determinado limite (atualmente 100 bytes) serão
     compactados durante o armazenamento e descompactados durante a recuperação de forma
     transparente.</para>
    <para>Tipo: &boolean;, padrão: &true;.</para>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.opt-serializer">
   <term><constant>Memcached::OPT_SERIALIZER</constant></term>
   <listitem>
    <para>
     Especifica o serializador a ser usado para serializar valores não escalares.
     Os serializadores válidos são <constant>Memcached::SERIALIZER_PHP</constant> ou
     <constant>Memcached::SERIALIZER_IGBINARY</constant>. O último é
     suportado apenas quando memcached é configurado com a opção
     <literal>--enable-memcached-igbinary</literal> e a extensão
     <literal>igbinary</literal> é carregada.
    </para>
    <para>Tipo: &integer;, padrão: <constant>Memcached::SERIALIZER_PHP</constant>.</para>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.serializer-php">
   <term><constant>Memcached::SERIALIZER_PHP</constant></term>
   <listitem>
    <para>O serializador PHP padrão.</para>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.serializer-igbinary">
   <term><constant>Memcached::SERIALIZER_IGBINARY</constant></term>
   <listitem>
    <para>O serializador <link xlink:href="&url.igbinary;">igbinary</link>.
     Em vez de representação textual, ele armazena estruturas de dados PHP
     em um formato binário compacto, resultando em ganhos de espaço e tempo.</para>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.serializer-json">
   <term><constant>Memcached::SERIALIZER_JSON</constant></term>
   <listitem>
    <para>O serializador JSON.</para>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.opt-prefix-key">
   <term><constant>Memcached::OPT_PREFIX_KEY</constant></term>
   <listitem>
    <para>Isso pode ser usado para criar um "domínio" para suas keys de item. O valor
     especificado aqui será prefixado para cada uma das keys. Não pode ter
     mais de <literal>128</literal> caracteres e reduzirá o tamanho
     máximo de key disponível. O prefixo é aplicado apenas às keys do item,
     não às keys do servidor.</para>
    <para>Tipo: &string;, padrão: <literal>""</literal>.</para>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.opt-hash">
   <term><constant>Memcached::OPT_HASH</constant></term>
   <listitem>
    <para>Especifica o algoritmo de hash usado para as keys do item. Os valores
     válidos são fornecidos por meio das constantes <constant>Memcached::HASH_*</constant>.
     Cada algoritmo de hash tem suas vantagens e desvantagens. Vá com o padrão
     se você não souber ou não se importar.</para>
    <para>Tipo: &integer;, padrão: <constant>Memcached::HASH_DEFAULT</constant></para>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.hash-default">
   <term><constant>Memcached::HASH_DEFAULT</constant></term>
   <listitem>
    <para>O algoritmo de hash de key de item padrão (Jenkins one-at-a-time).</para>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.hash-md5">
   <term><constant>Memcached::HASH_MD5</constant></term>
   <listitem>
    <para>Algoritmo de hash de key de item MD5.</para>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.hash-crc">
   <term><constant>Memcached::HASH_CRC</constant></term>
   <listitem>
    <para>Algoritmo de hash de key de item CRC.</para>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.hash-fnv1-64">
   <term><constant>Memcached::HASH_FNV1_64</constant></term>
   <listitem>
    <para>Algoritmo de hash de key de item FNV1_64.</para>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.hash-fnv1a-64">
   <term><constant>Memcached::HASH_FNV1A_64</constant></term>
   <listitem>
    <para>Algoritmo de hash de key de item FNV1_64A.</para>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.hash-fnv1-32">
   <term><constant>Memcached::HASH_FNV1_32</constant></term>
   <listitem>
    <para>Algoritmo de hash de key de item FNV1_32.</para>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.hash-fnv1a-32">
   <term><constant>Memcached::HASH_FNV1A_32</constant></term>
   <listitem>
    <para>Algoritmo de hash de key de item FNV1_32A.</para>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.hash-hsieh">
   <term><constant>Memcached::HASH_HSIEH</constant></term>
   <listitem>
    <para>Algoritmo de hash de key de item Hsieh.</para>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.hash-murmur">
   <term><constant>Memcached::HASH_MURMUR</constant></term>
   <listitem>
    <para>Algoritmo de hash de key de item de Murmur.</para>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.opt-distribution">
   <term><constant>Memcached::OPT_DISTRIBUTION</constant></term>
   <listitem>
    <para> Especifica o método de distribuição de keys de itens para os servidores.
     Os métodos atualmente suportados são modulo e hashing consistente. O hash consistente
     oferece melhor distribuição e permite que os servidores sejam adicionados ao cluster
     com perdas mínimas de cache.</para>
    <para>Tipo: &integer;, padrão: <constant>Memcached::DISTRIBUTION_MODULA.</constant></para>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.distribution-modula">
   <term><constant>Memcached::DISTRIBUTION_MODULA</constant></term>
   <listitem>
    <para>Algoritmo de distribuição de keys baseado em módulo.</para>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.distribution-consistent">
   <term><constant>Memcached::DISTRIBUTION_CONSISTENT</constant></term>
   <listitem>
    <para>Algoritmo consistente de distribuição de keys de hash (baseado em libketama).</para>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.opt-libketama-compatible">
   <term><constant>Memcached::OPT_LIBKETAMA_COMPATIBLE</constant></term>
   <listitem>
    <para>Ativa ou desativa a compatibilidade com comportamento semelhante ao libketama.
     Quando ativado, o algoritmo de hash da key do item é definido como MD5 e a distribuição
     é definida para ser uma distribuição de hash consistente ponderada. Isso é útil porque
     outros clientes baseados em libketama (Python, Ruby, etc.) com a mesma
     configuração de servidor poderão acessar as keys de forma transparente.
    </para>
    <note>
     <para>
      É altamente recomendável ativar esta opção se você deseja usar
      hashing consistente e pode ser ativado por padrão em versões
      futuras.
     </para>
    </note>
    <para>Tipo: &boolean;, padrão: &false;.</para>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.opt-buffer-writes">
   <term><constant>Memcached::OPT_BUFFER_WRITES</constant></term>
   <listitem>
    <para>Ativa ou desativa a E/S em buffer. Habilitar a E/S em buffer
     faz com que os comandos de armazenamento sejam "armazenados" em vez de serem enviados.
     Qualquer ação que recupera dados faz com que esse buffer seja enviado para a conexão remota.
     Sair da conexão ou encerrar a conexão também fará com que os dados armazenados em buffer
     sejam enviados para a conexão remota.</para>
    <para>Tipo: &boolean;, padrão: &false;.</para>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.opt-binary-protocol">
   <term><constant>Memcached::OPT_BINARY_PROTOCOL</constant></term>
   <listitem>
    <para>Habilite o uso do protocolo binário. Observe que você não pode
     alternar esta opção em uma conexão aberta.</para>
    <para>Tipo: &boolean;, padrão: &false;.</para>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.opt-no-block">
   <term><constant>Memcached::OPT_NO_BLOCK</constant></term>
   <listitem>
    <para>Ativa ou desativa a E/S assíncrona. Este é o transporte mais
     rápido disponível para funções de armazenamento.</para>
    <para>Tipo: &boolean;, padrão: &false;.</para>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.opt-noreply">
   <term><constant>Memcached::OPT_NOREPLY</constant></term>
   <listitem>
    <para>
     Habilita ou desabilita ignorar o resultado dos comandos de armazenamento
     (set, add, replace, append, prepend, delete, increment, decrement, etc.).
     Comandos de armazenamento serão enviados sem perder tempo esperando por uma
     resposta (não haveria resposta).
     Comandos de recuperação como <function>Memcached::get</function> não são afetados por esta configuração..</para>
    <para>Tipo: &boolean;, padrão: &false;.</para>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.opt-tcp-nodelay">
   <term><constant>Memcached::OPT_TCP_NODELAY</constant></term>
   <listitem>
    <para>Ativa ou desativa o recurso sem atraso para conectar sockets
     (pode ser mais rápido em alguns ambientes).</para>
    <para>Tipo: &boolean;, padrão: &false;.</para>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.opt-socket-send-size">
   <term><constant>Memcached::OPT_SOCKET_SEND_SIZE</constant></term>
   <listitem>
    <para>O buffer máximo de envio de socket em bytes.</para>
    <para>Tipo: &integer;, padrão: varia de acordo com a plataforma/kernel
     configuração.</para>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.opt-socket-recv-size">
   <term><constant>Memcached::OPT_SOCKET_RECV_SIZE</constant></term>
   <listitem>
    <para>O buffer máximo de recebimento de socket em bytes.</para>
    <para>Tipo: &integer;, padrão: varia de acordo com a plataforma/kernel
     configuração.</para>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.opt-connect-timeout">
   <term><constant>Memcached::OPT_CONNECT_TIMEOUT</constant></term>
   <listitem>
    <para>No modo non-blocking define o valor do timeout durante a conexão
     do socket, em milissegundos.</para>
    <para>Tipo: &integer;, padrão: <literal>1000</literal>.</para>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.opt-retry-timeout">
   <term><constant>Memcached::OPT_RETRY_TIMEOUT</constant></term>
   <listitem>
    <para>A quantidade de tempo, em segundos, para aguardar até tentar novamente uma
     tentativa de conexão com falha.</para>
    <para>Tipo: &integer;, padrão: <literal>0</literal>.</para>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.opt-send-timeout">
   <term><constant>Memcached::OPT_SEND_TIMEOUT</constant></term>
   <listitem>
    <para>Tempo limite de envio do socket, em microssegundos. Nos casos em que
     você não pode usar non-blocking I/O, isso permitirá que você ainda tenha
     timeouts no envio de dados.</para>
    <para>Tipo: &integer;, padrão: <literal>0</literal>.</para>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.opt-recv-timeout">
   <term><constant>Memcached::OPT_RECV_TIMEOUT</constant></term>
   <listitem>
    <para>Tempo limite de leitura do Socket, em microssegundos. Nos casos em que
     você não pode usar non-blocking I/O, isso permitirá que você ainda tenha
     timeouts na leitura de dados.</para>
    <para>Tipo: &integer;, padrão: <literal>0</literal>.</para>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.opt-poll-timeout">
   <term><constant>Memcached::OPT_POLL_TIMEOUT</constant></term>
   <listitem>
    <para>Tempo limite para polling de conexão, em milissegundos.</para>
    <para>Tipo: &integer;, padrão: <literal>1000</literal>.</para>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.opt-cache-lookups">
   <term><constant>Memcached::OPT_CACHE_LOOKUPS</constant></term>
   <listitem>
    <para>Ativa ou desativa o cache de pesquisas de DNS.</para>
    <para>Tipo: &boolean;, padrão: &false;.</para>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.opt-server-failure-limit">
   <term><constant>Memcached::OPT_SERVER_FAILURE_LIMIT</constant></term>
   <listitem>
    <para>Especifica o limite de falha para tentativas de conexão do servidor. O
     servidor será removido após tantas falhas contínuas de
     conexão.</para>
    <para>Tipo: &integer;, padrão: <literal>0</literal>.</para>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.have-igbinary">
   <term><constant>Memcached::HAVE_IGBINARY</constant></term>
   <listitem>
    <para>Indica se o suporte ao serializador igbinary está disponível.</para>
    <para>Tipo: &boolean;.</para>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.have-json">
   <term><constant>Memcached::HAVE_JSON</constant></term>
   <listitem>
    <para>Indica se o suporte ao serializador JSON está disponível.</para>
    <para>Tipo: &boolean;.</para>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.have-msgpack">
   <term><constant>Memcached::HAVE_MSGPACK</constant></term>
   <listitem>
    <para>Indica se o suporte ao serializador msgpack está disponível.</para>
    <para>Tipo: &boolean;.</para>
    <para>Disponível a partir do Memcached 3.0.0.</para>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.have-session">
   <term><constant>Memcached::HAVE_SESSION</constant></term>
   <listitem>
    <para>Tipo: &boolean;.</para>
    <para>Disponível a partir do Memcached 3.0.0.</para>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.have-sasl">
   <term><constant>Memcached::HAVE_SASL</constant></term>
   <listitem>
    <para>Tipo: &boolean;.</para>
    <para>Disponível a partir do Memcached 3.0.0.</para>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.get-extended">
   <term><constant>Memcached::GET_EXTENDED</constant></term>
   <listitem>
    <para>Uma flag para <function>Memcached::get</function>, <function>Memcached::getMulti</function> e
     <function>Memcached::getMultiByKey</function> para garantir que os valores de token CAS
     também sejam retornados.</para>
    <para>Disponível a partir do Memcached 3.0.0.</para>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.get-preserve-order">
   <term><constant>Memcached::GET_PRESERVE_ORDER</constant></term>
   <listitem>
    <para>Uma flag para <function>Memcached::getMulti</function> e
     <function>Memcached::getMultiByKey</function> para garantir que as keys sejam
     retornadas na mesma ordem em que foram solicitadas. Keys não existentes
     obtêm um valor padrão de NULL.</para>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.res-success">
   <term><constant>Memcached::RES_SUCCESS</constant></term>
   <listitem>
    <para>A operação foi bem-sucedida.</para>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.res-failure">
   <term><constant>Memcached::RES_FAILURE</constant></term>
   <listitem>
    <para>A operação falhou de alguma forma.</para>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.res-host-lookup-failure">
   <term><constant>Memcached::RES_HOST_LOOKUP_FAILURE</constant></term>
   <listitem>
    <para>Falha na pesquisa de DNS.</para>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.res-unknown-read-failure">
   <term><constant>Memcached::RES_UNKNOWN_READ_FAILURE</constant></term>
   <listitem>
    <para>Falha ao ler os dados da rede.</para>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.res-protocol-error">
   <term><constant>Memcached::RES_PROTOCOL_ERROR</constant></term>
   <listitem>
    <para>Comando inválido no protocolo memcached.</para>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.res-client-error">
   <term><constant>Memcached::RES_CLIENT_ERROR</constant></term>
   <listitem>
    <para>Erro no lado do cliente.</para>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.res-server-error">
   <term><constant>Memcached::RES_SERVER_ERROR</constant></term>
   <listitem>
    <para>Erro no lado do servidor.</para>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.res-write-failure">
   <term><constant>Memcached::RES_WRITE_FAILURE</constant></term>
   <listitem>
    <para>Falha ao gravar dados de rede.</para>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.res-data-exists">
   <term><constant>Memcached::RES_DATA_EXISTS</constant></term>
   <listitem>
    <para>Falha ao comparar e trocar: o item que você está tentando armazenar foi
     modificado desde a última vez que foi obtido.</para>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.res-notstored">
   <term><constant>Memcached::RES_NOTSTORED</constant></term>
   <listitem>
    <para>O item não foi armazenado: mas não devido a um erro. Isso normalmente
     significa que a condição para um comando "add" ou "replace" não foi
     atendida ou que o item está em uma fila de exclusão.</para>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.res-notfound">
   <term><constant>Memcached::RES_NOTFOUND</constant></term>
   <listitem>
    <para>O item com esta keys não foi encontrado (com operação "get" ou
     operações "cas").</para>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.res-partial-read">
   <term><constant>Memcached::RES_PARTIAL_READ</constant></term>
   <listitem>
    <para>Erro parcial de leitura de dados de rede.</para>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.res-some-errors">
   <term><constant>Memcached::RES_SOME_ERRORS</constant></term>
   <listitem>
    <para>Alguns erros ocorreram durante a obtenção múltipla.</para>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.res-no-servers">
   <term><constant>Memcached::RES_NO_SERVERS</constant></term>
   <listitem>
    <para>A lista de servidores está vazia.</para>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.res-end">
   <term><constant>Memcached::RES_END</constant></term>
   <listitem>
    <para>Fim do conjunto de resultados.</para>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.res-errno">
   <term><constant>Memcached::RES_ERRNO</constant></term>
   <listitem>
    <para>Erro no sistema.</para>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.res-buffered">
   <term><constant>Memcached::RES_BUFFERED</constant></term>
   <listitem>
    <para>A operação foi armazenada em buffer.</para>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.res-timeout">
   <term><constant>Memcached::RES_TIMEOUT</constant></term>
   <listitem>
    <para>A operação expirou.</para>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.res-bad-key-provided">
   <term><constant>Memcached::RES_BAD_KEY_PROVIDED</constant></term>
   <listitem>
    <para>Key ruim.</para>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.res-connection-socket-create-failure">
   <term><constant>Memcached::RES_CONNECTION_SOCKET_CREATE_FAILURE</constant></term>
   <listitem>
    <para>Falha ao criar socket de rede.</para>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.res-payload-failure">
   <term><constant>Memcached::RES_PAYLOAD_FAILURE</constant></term>
   <listitem>
    <para>Falha de payload: não foi possível compactar/descompactar ou serializar/desserializar o valor.</para>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.res-auth-problem">
   <term><constant>Memcached::RES_AUTH_PROBLEM</constant></term>
   <listitem>
    <para>Disponível a partir do Memcached 3.0.0.</para>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.res-auth-failure">
   <term><constant>Memcached::RES_AUTH_FAILURE</constant></term>
   <listitem>
    <para>Disponível a partir do Memcached 3.0.0.</para>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.res-auth-continue">
   <term><constant>Memcached::RES_AUTH_CONTINUE</constant></term>
   <listitem>
    <para>Disponível a partir do Memcached 3.0.0.</para>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.res-e2big">
   <term><constant>Memcached::RES_E2BIG</constant></term>
   <listitem>
    <para>Disponível a partir do Memcached 3.0.0.</para>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.res-key-too-big">
   <term><constant>Memcached::RES_KEY_TOO_BIG</constant></term>
   <listitem>
    <para>Disponível a partir do Memcached 3.0.0.</para>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.res-server-temporarily-disabled">
   <term><constant>Memcached::RES_SERVER_TEMPORARILY_DISABLED</constant></term>
   <listitem>
    <para>Disponível a partir do Memcached 3.0.0.</para>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.res-server-memory-allocation-failure">
   <term><constant>Memcached::RES_SERVER_MEMORY_ALLOCATION_FAILURE</constant></term>
   <listitem>
    <para>Disponível a partir do Memcached 3.0.0.</para>
   </listitem>
  </varlistentry>

 </variablelist>
</appendix>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
