<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: 9caac4c5cce859b4ae5d497972442fcfaa840d81 Maintainer: marcosmarcolin Status: ready --><!-- CREDITS: fernandoc -->
<refentry xml:id="function.error-reporting" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>error_reporting</refname>
  <refpurpose>Define quais erros do PHP são relatados</refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>int</type><methodname>error_reporting</methodname>
   <methodparam choice="opt"><type class="union"><type>int</type><type>null</type></type><parameter>error_level</parameter><initializer>&null;</initializer></methodparam>
  </methodsynopsis>
  <para>
   A função <function>error_reporting</function> define a diretiva
   <link linkend="ini.error-reporting">error_reporting</link>
   em tempo de execução. O PHP possui muitos níveis de erros, e o uso
   desta função define esse nível para a duração (tempo de execução) do
   seu script. Se o parâmetro opcional <parameter>error_level</parameter>
   não for definido, a função <function>error_reporting</function> retornará apenas o
   nível de relatório de erros atual.
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>error_level</parameter></term>
     <listitem>
      <para>
       O novo nível de <link linkend="ini.error-reporting">error_reporting</link>.
       Pode ser uma máscara de bits ou constantes nomeadas. É altamente recomendado
       o uso de constantes nomeadas para garantir compatibilidade com futuras
       versões. Conforme são adicionados níveis de erro, o intervalo de inteiros aumenta,
       então os níveis de erro baseados em inteiros mais antigos nem sempre se comportarão como esperado.
      </para>
      <para>
       As constantes de nível de erro disponíveis e os significados reais
       desses níveis de erro são descritos nas
       <link linkend="errorfunc.constants">constantes predefinidas</link>.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   Retorna o nível de <link linkend="ini.error-reporting">error_reporting</link>
   <emphasis>antes</emphasis> que ele seja alterado para
   <parameter>error_level</parameter>.
  </para>
  <note>
   <simpara>
    O <link linkend="language.operators.errorcontrol">operador de controle de erro</link>
    <literal>@</literal> altera o <parameter>error_level</parameter> durante o tratamento de erros.
   </simpara>
  </note>
 </refsect1>

 <refsect1 role="changelog">
  &reftitle.changelog;
  <informaltable>
   <tgroup cols="2">
    <thead>
     <row>
      <entry>&Version;</entry>
      <entry>&Description;</entry>
     </row>
    </thead>
    <tbody>
     <row>
      <entry>8.0.0</entry>
      <entry>
       <parameter>error_level</parameter> agora permite null.
      </entry>
     </row>
    </tbody>
   </tgroup>
  </informaltable>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>Exemplo <function>error_reporting</function></title>
    <programlisting role="php">
<![CDATA[
<?php

// Desativar todos os relatórios de erros
error_reporting(0);

// Relatar erros simples durante a execução
error_reporting(E_ERROR | E_WARNING | E_PARSE);

// Relatar E_NOTICE também pode ser útil (para relatar variáveis não inicializadas
// ou capturar erros de digitação nos nomes das variáveis...)
error_reporting(E_ERROR | E_WARNING | E_PARSE | E_NOTICE);

// Relatar todos os erros, exceto E_NOTICE
error_reporting(E_ALL & ~E_NOTICE);

// Relatar todos os erros do PHP
error_reporting(E_ALL);

// Relatar todos os erros do PHP
error_reporting(-1);

// O mesmo que error_reporting(E_ALL);
ini_set('error_reporting', E_ALL);

?>
]]>
    </programlisting>
   </example>
  </para>
 </refsect1>

 <refsect1 role="notes">
  &reftitle.notes;
  <tip>
   <simpara>
    Passar o valor <literal>-1</literal> mostrará todos os erros possíveis,
    mesmo quando novos níveis e constantes forem adicionados em futuras versões do PHP. O
    comportamento é equivalente a passar a constante <constant>E_ALL</constant>.
   </simpara>
  </tip>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member>A diretiva <link linkend="ini.display-errors">display_errors</link></member>
    <member>A diretiva <link linkend="ini.html-errors">html_errors</link></member>
    <member>A diretiva <link linkend="ini.xmlrpc-errors">xmlrpc_errors</link></member>
    <member>O operador <link linkend="language.operators.errorcontrol">error control</link></member>
    <member><function>ini_set</function></member>
   </simplelist>
  </para>
 </refsect1>
</refentry>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
