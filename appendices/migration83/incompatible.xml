<?xml version="1.0" encoding="utf-8"?><!-- EN-Revision: c3b9bcfbee1f77830cfa086e88de6c0742cfb8ad Maintainer: marcosmarcolin Status: ready -->
<sect1 xml:id="migration83.incompatible" xmlns:xlink="http://www.w3.org/1999/xlink">
 <title>Alterações incompatíveis com versões anteriores</title>

 <sect2 xml:id="migration83.incompatible.core">
  <title>PHP Core</title>

  <sect3 xml:id="migration83.incompatible.core.overflowing-call-stack">

   <title>Programas que estavam muito próximos de estourar a pilha de chamadas.</title>
   <para>
    Programas que estavam muito próximos de esgotar a pilha de chamadas agora podem lançar um
    <classname>Error</classname> ao usar mais do que
    !-- link linkend="zend.max_allowed_stack_size-zend.reserved_stack_size" -->zend.max_allowed_stack_size-zend.reserved_stack_size<!-- </link>--> bytes de pilha
    (<!-- link linkend="fiber.stack_size-zend.reserved_stack_size" -->fiber.stack_size-zend.reserved_stack_size<!-- </link>--> para fibers).
   </para>
  </sect3>

  <sect3 xml:id="migration83.incompatible.core.proc-get-status-multiple-times">
   <title>Executando proc_get_status() várias vezes</title>
   <para>
    Executar <function>proc_get_status</function> várias vezes agora sempre
    retornará o valor correto em sistemas POSIX. Anteriormente, apenas a primeira chamada
    da função retornava o valor correto. Executar
    <function>proc_close</function> após <function>proc_get_status</function>
    agora também retornará o código de saída correto. Anteriormente, isso retornaria
    <literal>-1</literal>.
    Internamente, isso funciona armazenando em cache o resultado em sistemas POSIX.
    Se for necessário o comportamento anterior, é possível verificar a chave
    <literal>"cached"</literal> no array retornado por
    <function>proc_get_status</function> para verificar se o resultado foi armazenado em cache.
   </para>
  </sect3>

  <sect3 xml:id="migration83.incompatible.core.zend-max-execution-timers">
   <title>Temporizadores Máximos de Execução do Zend</title>
   <para>
    Os Temporizadores Máximos de Execução do Zend agora estão habilitados por padrão para compilações ZTS no
    Linux.
   </para>
  </sect3>

  <sect3 xml:id="migration83.incompatible.core.traits-with-static-properties">
   <title>Usos de traits com propriedades estáticas</title>
   <para>
    O uso de traits com propriedades estáticas agora irá redeclarar as propriedades
    estáticas herdadas da classe pai. Isso criará um armazenamento de propriedade estática
    separado para a classe atual. Isso é análogo a adicionar a
    propriedade estática diretamente à classe sem o uso de traits.
   </para>
  </sect3>

  <sect3 xml:id="migration83.incompatible.core.negative-index-to-empty-array">
   <title>Atribuir um índice negativo a um array vazio</title>
   <para>
    Atribuir um índice negativo <varname>$n</varname> a um array vazio agora garantirá que o
    próximo índice seja <code>$n+1</code>, em vez de <literal>0</literal>.
   </para>
  </sect3>

  <sect3 xml:id="migration83.incompatible.core.class-constant-visibility-check">
   <title>Verificação de consistência na visibilidade de constantes de classe</title>
   <para>
    A variação na visibilidade de constantes de classe agora é verificada corretamente
    quando herdada de interfaces.
   </para>
  </sect3>

  <sect3 xml:id="migration83.incompatible.core.weakmap-entries-maps-to-itself">
   <title>Entradas WeakMap cuja chave mapeia para si mesma</title>
   <para>
    As entradas <classname>WeakMap</classname> cuja chave mapeia para si mesma (possivelmente
    de forma transitiva) agora podem ser removidas durante a coleta de ciclos se a chave não
    for alcançável, exceto por meio da iteração sobre o WeakMap (a alcançabilidade por iteração é
    considerada fraca).
    Anteriormente, tais entradas nunca seriam removidas automaticamente.
   </para>
  </sect3>
 </sect2>

 <sect2 xml:id="migration83.incompatible.date">
  <title>Date</title>

  <para>
   A extensão DateTime introduziu exceções e erros específicos da extensão Date sob
   as hierarquias <classname>DateError</classname> e
   <classname>DateException</classname>, em vez de avisos e
   exceções genéricas. Isso melhora o tratamento de erros, embora exija que se
   verifiquem erros e exceções.
  </para>
 </sect2>

 <sect2 xml:id="migration83.incompatible.dom">
  <title>DOM</title>

  <para>
   Chamar <methodname>DOMChildNode::after</methodname>,
   <methodname>DOMChildNode::before</methodname>,
   <methodname>DOMChildNode::replaceWith</methodname>
   em um nó que não tem pai agora não faz nada (no-op) em vez de gerar
   uma exceção de hierarquia, conforme exigido pela especificação DOM.
  </para>

  <para>
   Usar os métodos <classname>DOMParentNode</classname>
   e <classname>DOMChildNode</classname> sem um documento agora funciona
   em vez de lançar uma exceção <constant>DOM_HIERARCHY_REQUEST_ERR</constant>
   <classname>DOMException</classname>.
   Isso está de acordo com o comportamento exigido pela especificação DOM.
  </para>

  <para>
   Chamar <methodname>DOMDocument::createAttributeNS</methodname> sem especificar
   um prefixo criaria incorretamente um namespace padrão, colocando o elemento
   dentro do namespace em vez do atributo. Esse erro foi corrigido.
  </para>

  <para>
   Anteriormente, <methodname>DOMDocument::createAttributeNS</methodname>
   lançaria incorretamente uma exceção <constant>DOM_NAMESPACE_ERRNAMESPACE_ERR</constant>
   <classname>DOMException</classname> quando o prefixo já estivesse sendo usado para
   outro URI. Agora, ele escolhe corretamente um prefixo diferente quando há conflito
   de nomes de prefixo.
  </para>

  <para>
   Foram adicionados novos métodos e propriedades a algumas classes DOM.
   Se uma classe definida pelo usuário herda dessas classes e declara um método ou
   propriedade com o mesmo nome, as declarações devem ser compatíveis. Caso contrário,
   ocorrerá um erro de compilação típico relacionado a declarações incompatíveis.
   Consulte a <link linkend="migration83.new-features.dom">lista de novas funcionalidades</link>
   e <link linkend="migration83.new-functions.dom">novas funções</link> para
   obter uma lista dos métodos e propriedades recém-implementados.
  </para>
 </sect2>

 <sect2 xml:id="migration83.incompatible.ffi">
  <title>FFI</title>

  <para>
   As funções C que têm um tipo de retorno <type>void</type> agora retornam &null; em vez de
   retornar o seguinte objeto <literal>object(FFI\CData:void) { }</literal>.
  </para>
 </sect2>

 <sect2 xml:id="migration83.incompatible.opcache">
  <title>Opcache</title>

  <para>
   A diretiva INI <link linkend="ini.opcache.consistency-checks">opcache.consistency_checks</link>
   foi removida. Essa funcionalidade estava quebrada com o tracing JIT,
   bem como com o inheritance cache, e foi desativada sem a possibilidade de ser habilitada
   desde o PHP 8.1.18 e o PHP 8.2.5.
   Tanto o tracing JIT quanto o inheritance cache podem modificar a memória compartilhada (shm)
   depois que o script foi persistido, invalidando seu checksum. A tentativa de correção ignorou
   os ponteiros modificáveis, mas foi rejeitada devido à complexidade. Por esse motivo,
   foi decidido remover a funcionalidade em vez de mantê-la.
  </para>
 </sect2>

 <sect2 xml:id="migration83.incompatible.phar">
  <title>Phar</title>

  <para>
   O tipo das constantes de classe da classe <classname>Phar</classname> agora está declarado.
  </para>
 </sect2>

 <sect2 xml:id="migration83.incompatible.standard">
  <title>Standard</title>

  <para>
   A função <function>range</function> sofreu várias mudanças:
   <simplelist>
    <member>Agora é lançado um <classname>TypeError</classname> ao passar <type>object</type>s,
     <type>resource</type>s ou <type>array</type>s como entradas de limite.</member>
    <member>Agora é lançado um <classname>ValueError</classname> mais descritivo
     ao passar <literal>0</literal> para <parameter>$step</parameter>.</member>
    <member>Agora é lançado um <classname>ValueError</classname> ao usar um
     <parameter>$step</parameter> negativo para intervalos crescentes.</member>
    <member>Se <parameter>$step</parameter> for um número em ponto flutuante
     que pode ser interpretado como um número inteiro, ele agora será tratado como tal.</member>
    <member>Agora, um <classname>ValueError</classname> é lançado se qualquer
     argumento for infinito ou NAN.</member>
    <member>Agora, é gerado um <constant>E_WARNING</constant> se
     <parameter>$start</parameter> ou <parameter>$end</parameter> for uma
     string vazia. O valor ainda é convertido para o valor <literal>0</literal>.</member>
    <member>Agora, é gerado um <constant>E_WARNING</constant> se
     <parameter>$start</parameter> ou <parameter>$end</parameter> tiver mais de
     um byte, desde que seja uma string não numérica.</member>
    <member>Agora, é gerado um <constant>E_WARNING</constant> se
     <parameter>$start</parameter> ou <parameter>$end</parameter> for convertido para um
     inteiro porque a outra entrada de limite é um número
     (por exemplo, <code>range(5, 'z');</code>).</member>
    <member>Agora, é gerado um <constant>E_WARNING</constant> se
     <parameter>$step</parameter> for um número em ponto flutuante ao tentar gerar
     um intervalo de caracteres, exceto se ambas as entradas de limite forem strings numéricas (por exemplo,
     <code>range('5', '9', 0.5);</code> não gera um aviso).</member>
    <member><function>range</function> agora gera uma lista de caracteres se uma das
     entradas de limite for um dígito em forma de string, em vez de converter a outra entrada
     para um número inteiro (por exemplo, <code>range('9', 'A');</code>).</member>
   </simplelist>

   <informalexample>
    <programlisting role="php">
<![CDATA[
<?php
range('9', 'A'); // ["9", ":", ";", "<", "=", ">", "?", "@", "A"], a partir do PHP 8.3.0
range('9', 'A'); // [9, 8, 7, 6, 5, 4, 3, 2, 1, 0], antes do PHP 8.3.0
?>
]]>
    </programlisting>
   </informalexample>
  </para>

  <para>
   A verificação de erros das flags da função <function>file</function> agora identifica todas as flags inválidas.
   Notavelmente, <constant>FILE_APPEND</constant> era anteriormente aceito silenciosamente.
  </para>
 </sect2>

 <sect2 xml:id="migration83.incompatible.SNMP">
  <title>SNMP</title>

  <para>
   O tipo das constantes de classe da classe <classname>SNMP</classname> agora está declarado.
  </para>
 </sect2>

</sect1>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
