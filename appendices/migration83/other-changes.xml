<?xml version="1.0" encoding="utf-8"?><!-- EN-Revision: 7fcd0116aaa5687244761e8c073bf47d5781376e Maintainer: marcosmarcolin Status: ready -->
<sect1 xml:id="migration83.other-changes" xmlns:xlink="http://www.w3.org/1999/xlink">
 <title>Outras mudanças</title>

 <sect2 xml:id="migration83.other-changes.core">
  <title>Mudanças no Core</title>

  <sect3 xml:id="migration83.other-changes.core.ffi">
   <title>FFI</title>

   <para>
    <methodname>FFI::load</methodname> agora é permitido durante o carregamento antecipado
    quando <link linkend="ini.opcache.preload-user">opcache.preload_user</link>
    é o usuário do sistema atual. Anteriormente,
    chamar <methodname>FFI::load</methodname> não era possível
    durante o carregamento antecipado se a diretiva
    <link linkend="ini.opcache.preload-user">opcache.preload_user</link>
    estivesse definida.
   </para>
  </sect3>

  <sect3 xml:id="migration83.other-changes.core.fpm">
   <title>FPM</title>

   <para>
    O teste CLI do FPM agora falha se o caminho do socket for mais longo do que o suportado pelo sistema operacional.
   </para>
  </sect3>

  <sect3 xml:id="migration83.other-changes.core.opcache">
   <title>Opcache</title>

   <para>
    Nas SAPIs CLI e phpdbg, o carregamento antecipado não exige mais que a
    diretiva <link linkend="ini.opcache.preload-user">opcache.preload_user</link>
    esteja configurada ao ser executado como root.
    Nas outras SAPIs, essa diretiva é necessária ao ser executado como root,
    pois o carregamento antecipado é feito antes da SAPI mudar para um usuário não privilegiado.
   </para>
  </sect3>

  <sect3 xml:id="migration83.other-changes.core.streams">
   <title>Streams</title>

   <para>
    A função <function>fread</function> de bloqueio em uma conexão de socket
    agora retorna imediatamente se houver dados em buffer, em vez de esperar por mais dados.
   </para>

   <para>
    A memória do fluxo (memory stream) não falha mais se o deslocamento de busca estiver além do final.
    Em vez disso, a memória é aumentada na próxima gravação e os dados entre o antigo final e o
    deslocamento são preenchidos com bytes zero, da mesma forma como acontece com arquivos.
   </para>

   <para>
    Operações de acesso ao <function>stat</function> como
    <function>file_exists</function> e similares agora usarão o caminho real
    em vez do caminho real da stream. Isso é consistente com a abertura de
    streams.
   </para>
  </sect3>
 </sect2>

 <sect2 xml:id="migration83.other-changes.sapi">
  <title>Alterações nos Módulos SAPI</title>

  <sect3 xml:id="migration83.other-changes.sapi.cli">
   <title>CLI</title>

   <para>
    Os fluxos <constant>STDOUT</constant>, <constant>STDERR</constant> e
    <constant>STDIN</constant> não são mais fechados na destruição de resources,
    o que ocorre principalmente quando o CLI termina.
    No entanto, ainda é possível fechar explicitamente esses fluxos usando
    <function>fclose</function>  e funções semelhantes.
   </para>
  </sect3>
 </sect2>

 <sect2 xml:id="migration83.other-changes.functions">
  <title>Funções Alteradas</title>

  <sect3 xml:id="migration83.other-changes.functions.core">
   <title>Core</title>

   <para>
    <function>gc_status</function> adicionou os seguintes 8 campos:

    <simplelist>
     <member><literal>"running"</literal> => bool</member>
     <member><literal>"protected"</literal> => bool</member>
     <member><literal>"full"</literal> => bool</member>
     <member><literal>"buffer_size"</literal> => int</member>
     <member><literal>"application_time"</literal> => float: empo total de aplicação,
      em segundos (incluindo collector_time)</member>
     <member><literal>"collector_time"</literal> => float: Tempo gasto coletando ciclos,
      em segundos (incluindo destructor_time e free_time)</member>
     <member><literal>"destructor_time"</literal> => float: Tempo gasto executando destrutores durante a
      coleta de ciclos, em segundos</member>
     <member><literal>"free_time"</literal> => float: Tempo gasto liberando valores
      durante a coleta de ciclos, em segundos.</member>
    </simplelist>
   </para>

   <para>
    <function>class_alias</function>agora suporta a criação de um alias de uma
    classe interna.
   </para>

   <para>
    Definir <link linkend="ini.open-basedir">open_basedir</link> em tempo de execução
    usando <code>ini_set('open_basedir', ...);</code> não aceita mais caminhos que
    contenham o diretório pai (<literal>..</literal>). Anteriormente,
    apenas os caminhos que começavam com <literal>..</literal> eram proibidos. Isso poderia
    ser facilmente contornado adicionando <literal>./</literal> ao início do caminho.
   </para>

   <para>
    Os manipuladores de exceção do usuário agora capturam exceções durante a finalização.
   </para>

   <para>
    O HTML resultante das funções <function>highlight_string</function> e
    <function>highlight_file</function> foi alterado.
    O espaço em branco entre as tags HTML externas é removido. As quebras de linha e
    espaços não são mais convertidos em entidades HTML. Todo o HTML agora é envolvido em uma tag
    <literal>&lt;pre&gt;</literal>. A tag <literal>&lt;span&gt;</literal>
    externa foi mesclada com a tag <literal>&lt;code&gt;</literal> .
   </para>

  </sect3>

  <sect3 xml:id="migration83.other-changes.functions.calendar">
   <title>Calendar</title>

   <para>
    A função <function>easter_date</function> agora suporta anos de 1970 a
    2.000.000.000 em sistemas de 64 bits, anteriormente, ela suportava apenas anos no
    intervalo de 1970 a 2037.
   </para>
  </sect3>

  <sect3 xml:id="migration83.other-changes.functions.curl">
   <title>Curl</title>

   <para>
    A função <function>curl_getinfo</function> agora suporta duas novas constantes:
    <constant>CURLINFO_CAPATH</constant> e
    <constant>CURLINFO_CAINFO</constant>. Se a opção for &null;, duas chaves
    adicionais são adicionadas:
    <literal>"capath"</literal> e <literal>"cainfo"</literal>.
   </para>
  </sect3>

  <sect3 xml:id="migration83.other-changes.functions.dom">
   <title>DOM</title>

   <para>
    Alterada a tentativa de tipo de retorno de
    <methodname>DOMCharacterData::appendData</methodname> para <type>true</type>.
   </para>

   <para>
    <methodname>DOMDocument::loadHTML</methodname>,
    <methodname>DOMDocument::loadHTMLFile</methodname>,
    <methodname>DOMDocument::loadXML</methodname>, e
    <methodname>DOMDocument::loadXMLFile</methodname> agora têm um tipo de retorno
    tentativo de <type>bool</type>. Anteriormente, isso estava documentado com um tipo de retorno
    de <code>DOMDocument|bool</code>, mas, a partir do PHP 8.0.0,
    <classname>DOMDocument</classname>
    não pode mais ser retornado, pois não pode ser chamado estaticamente.
   </para>

  </sect3>

  <sect3 xml:id="migration83.other-changes.functions.gd">
   <title>Gd</title>

   <para>
    A assinatura da função <function>imagerotate</function> foi alterada.
    O parâmetro <parameter>$ignore_transparent</parameter> foi removido,
    pois era ignorado desde o PHP 5.5.0.
   </para>
  </sect3>

  <sect3 xml:id="migration83.other-changes.functions.intl">
   <title>Intl</title>

   <para>
    A função <function>datefmt_set_timezone</function> (e seu alias
    <methodname>IntlDateformatter::setTimeZone</methodname>)
    agora retorna &true; em caso de sucesso, anteriormente retornava &null;.
   </para>

   <para>
    <methodname>IntlBreakiterator::setText</methodname> agora retorna &false;
    em caso de falha e &true; em caso de sucesso.
    Anteriormente, ela retornava &null; em ambos os casos.
   </para>

   <para>
    <methodname>IntlChar::enumCharNames</methodname> agora retorna um boolean.
    Anteriormente, ela retornava &null; em caso de sucesso e &false; em caso de falha.
   </para>
  </sect3>

  <sect3 xml:id="migration83.other-changes.functions.mbstring">
   <title>MBString</title>

   <para>
    As funções <function>mb_strtolower</function> e <function>mb_convert_case</function>
    implementam regras de formatação condicional para a letra sigma grega.
    Para <function>mb_convert_case</function>,
    a formatação condicional se aplica apenas aos modos <constant>MB_CASE_LOWER</constant>
    e <constant>MB_CASE_TITLE</constant>, não aos modos
    <constant>MB_CASE_LOWER_SIMPLE</constant> e
    <constant>MB_CASE_TITLE_SIMPLE</constant>..
   </para>

   <para>
    A função <function>mb_decode_mimeheader</function> interpreta os underscores em
    palavras MIME codificadas com QPrint conforme o RFC 2047; eles são
    convertidos em espaços.
    Os underscores devem ser codificados como <literal>"=5F"</literal> em tais
    palavras MIME codificadas.
   </para>

   <para>
    Em casos raros, <function>mb_encode_mimeheader</function> pode transferir-encode
    (codificar para transferência) a cadeia de entrada, enquanto em PHP 8.2 ela seria passada como ASCII bruto.
   </para>

   <para>
    A função <function>mb_encode_mimeheader</function> não descarta mais os bytes NUL (zero)
    ao codificar a string de entrada com QPrint.
    Isso anteriormente causava a corrupção de strings em determinadas codificações de texto, especialmente
    UTF-16 e UTF-32, ao usar mb_encode_mimeheader.
   </para>

   <para>
    O modo "não estrito" da função <function>mb_detect_encoding</function>'s agora se
    comporta conforme descrito na documentação.
    Anteriormente, retornava &false; se o mesmo byte (por exemplo, o primeiro
    byte) da string de entrada fosse inválido em todas as codificações candidatas.
    Mas geralmente, eliminava codificações candidatas da consideração quando
    um byte inválido era encontrado e, se o mesmo byte de entrada eliminasse todas
    as codificações restantes ainda em consideração, retornaria &false;.
    Por outro lado, se todas as codificações candidatas, exceto uma, fossem eliminadas da consideração,
    retornaria a última restante sem considerar quantos erros de codificação poderiam
    ser encontrados posteriormente na string.
    Isso difere do comportamento descrito na documentação, que diz:
    "Se estrito for definido como falso, a codificação mais próxima será
    retornada."
   </para>
  </sect3>

  <sect3 xml:id="migration83.other-changes.functions.mysqli">
   <title>mysqli</title>

   <para>
    <function>mysqli_fetch_object</function> now raises a
    <classname>ValueError</classname> instead of an <classname>Exception</classname>
    when the <parameter>$constructor_args</parameter> argument is non empty with
    the class not having constructor.
   </para>

   <para>
    <function>mysqli_poll</function> now raises a <classname>ValueError</classname>
    when neither the <parameter>$read</parameter>
    nor the <parameter>$error</parameter> arguments are passed.
   </para>

   <para>
    <function>mysqli_field_seek</function> and
    <methodname>mysqli_result::field_seek</methodname> now specify the return
    type as <type>true</type> instead of <type>bool</type>.
   </para>
  </sect3>

  <sect3 xml:id="migration83.other-changes.functions.odbc">
   <title>ODBC</title>

   <para>
    <function>odbc_autocommit</function> now accepts &null; for the
    <parameter>$enable</parameter> parameter.
    Passing &null; has the same behaviour as passing only 1 parameter,
    namely indicating if the autocommit feature is enabled or not.
   </para>
  </sect3>

  <sect3 xml:id="migration83.other-changes.functions.pgsql">
   <title>PGSQL</title>

   <para>
    <function>pg_fetch_object</function> now raises a
    <classname>ValueError</classname> instead of an <classname>Exception</classname>
    when the <parameter>$constructor_args</parameter> argument is non empty with
    the class not having constructor.
   </para>

   <para>
    <function>pg_insert</function> now raises a <classname>ValueError</classname>
    instead of a <constant>E_WARNING</constant> when the table specified is invalid.
   </para>

   <para>
    <function>pg_insert</function> and <function>pg_convert</function> raises
    a <classname>ValueError</classname> or a <classname>TypeError</classname>
    instead of a <constant>E_WARNING</constant> when the value/type of a field
    does not match properly with a PostgreSQL's type.
   </para>

   <para>
    The <parameter>$row</parameter> parameter of
    <function>pg_fetch_result</function>,
    <function>pg_field_prtlen</function>, and
    <function>pg_field_is_null</function> is now nullable.
   </para>
  </sect3>

  <sect3 xml:id="migration83.other-changes.functions.random">
   <title>Random</title>

   <para>
    Changed <function>mt_srand</function> and <function>srand</function> to
    not check the number of arguments to determine whether a random seed should
    be used. Passing &null; will generate a random seed, <literal>0</literal>
    will use zero as the seed. The functions are now consistent with
    <methodname>Random\Engine\Mt19937::__construct</methodname>.
   </para>

  </sect3>

  <sect3 xml:id="migration83.other-changes.functions.reflection">
   <title>Reflection</title>

   <para>
    Return type of <methodname>ReflectionClass::getStaticProperties</methodname>
    is no longer nullable.
   </para>
  </sect3>

  <sect3 xml:id="migration83.other-changes.functions.standard">
   <title>Standard</title>

   <para>
    <constant>E_NOTICE</constant>s emitted by <function>unserialize</function>
    have been promoted to <constant>E_WARNING</constant>.
    <!-- RFC: https://wiki.php.net/rfc/improve_unserialize_error_handling -->
   </para>

   <para>
    <function>unserialize</function> now emits a new <constant>E_WARNING</constant>
    if the input contains unconsumed bytes.
    <!-- RFC: https://wiki.php.net/rfc/unserialize_warn_on_trailing_data -->
   </para>

   <para>
    <function>array_pad</function> is now only limited by the maximum number of
    elements an array can have. Before, it was only possible to add at most 1048576
    elements at a time.
   </para>

   <para>
    <function>strtok</function> raises an <constant>E_WARNING</constant> in the
    case token is not provided when starting tokenization.
   </para>

   <para>
    <function>password_hash</function> will now chain the underlying
    <classname>Random\RandomException</classname>
    as the <classname>ValueError</classname>'s <parameter>$previous</parameter>
    <classname>Exception</classname> when salt generation fails.
   </para>

   <para>
    If using an array as the <parameter>$command</parameter>
    for <function>proc_open</function>, it must now have at least one
    non empty element. Otherwise a <classname>ValueError</classname>
    is thrown.
   </para>

   <para>
    <function>array_sum</function> and <function>array_product</function> now
    warn when values in the array cannot be converted to int/float.
    Previously arrays and objects where ignored whilst every other value was
    cast to int. Moreover, objects that define a numeric cast (e.g.
    <link linkend="book.gmp">GMP</link>) are now casted instead of ignored.
    <!-- RFC: https://wiki.php.net/rfc/saner-array-sum-product -->
   </para>

   <para>
    The <parameter>$decimal</parameter> of <function>number_format</function>
    now properly handles negative integers.
    Rounding with a negative value for <parameter>$decimal</parameter> means
    that <parameter>$num</parameter> is rounded to <parameter>$decimals</parameter>
    significant digits before the decimal point.
    Previously negative <parameter>$decimals</parameter> were silently
    ignored and the number got rounded to zero decimal places.
   </para>

   <para>
    A new <parameter>$before_needle</parameter> argument has been added to
    <function>strrchr</function>. It behaves like its counterpart in the
    <function>strstr</function> or <function>stristr</function> functions.
   </para>

   <para>
    <function>str_getcsv</function> and <function>fgetcsv</function> now return
    an empty string instead of a string with a single null byte for the last field
    which only contains an unterminated enclosure.
   </para>
  </sect3>

 </sect2>

 <sect2 xml:id="migration83.other-changes.extensions">
  <title>Other Changes to Extensions</title>

  <sect3 xml:id="migration83.other-changes.extensions.core">
   <title>Core</title>

   <para>
    Using the <link linkend="language.operators.increment">increment/decrement</link>
    operators (<literal>++</literal>/<literal>--</literal>) on values of type
    <type>bool</type> now emit warnings.
    This is because it currently has no effect, but will behave like
    <code>$bool += 1</code> in the future.
   </para>

   <para>
    Using the <link linkend="language.operators.increment">decrement</link>
    operator (<literal>--</literal>) on values of type <type>null</type> now emit warnings.
    This is because it currently has no effect, but will behave like
    <code>$null -= 1</code> in the future.
   </para>

   <para>
    Internal objects that implement an _IS_NUMBER cast but not a do_operator
    handler that overrides addition and subtraction now can be incremented
    and decrement as if one would do <code>$o += 1</code> or <code>$o -= 1</code>
   </para>
  </sect3>

  <sect3 xml:id="migration83.other-changes.extensions.dom">
   <title>DOM</title>

   <para>
    The DOM lifetime mechanism has been reworked such that implicitly removed
    nodes can still be fetched. Previously this resulted in an exception.
   </para>
  </sect3>

  <sect3 xml:id="migration83.other-changes.extensions.sqlite3">
   <title>SQLite3</title>

   <para>
    The <classname>SQLite3</classname> class now throws
    <classname>SQLite3Exception</classname> (extends
    <classname>Exception</classname>) instead of <classname>Exception</classname>.
   </para>

   <para>
    The SQLite error code is now passed in the exception error code instead of
    being included in the error message.
   </para>

  </sect3>
 </sect2>

 <sect2 xml:id="migration83.other-changes.ini">
  <title>Changes to INI File Handling</title>

  <itemizedlist>
   <listitem>
    <para>
     The <literal>assert.*</literal> INI settings have been deprecated.
     This comprises the following INI settings:
     <simplelist>
      <member><link linkend="ini.assert.active">assert.active</link></member>
      <member><link linkend="ini.assert.bail">assert.bail</link></member>
      <member><link linkend="ini.assert.callback">assert.callback</link></member>
      <member><link linkend="ini.assert.exception">assert.exception</link></member>
      <member><link linkend="ini.assert.warning">assert.warning</link></member>
     </simplelist>
     If the value of the setting is equal to the default value, no deprecation
     notice is emitted.
     The <link linkend="ini.zend.assertions">zend.assertions</link> INI setting
     should be used instead.
    </para>
   </listitem>
   <listitem>
    <para>
     <!--<link linkend="ini.zend.max_allowed_stack_size">-->zend.max_allowed_stack_size<!--</link>-->
     is a new INI directive to set the maximum allowed stack size.
     Possible values are <literal>0</literal> (detect the process or thread maximum stack size),
     <literal>-1</literal> (no limit), or a positive number of bytes.
     The default is <literal>0</literal>.
     When it is not possible to detect the the process or thread maximum stack
     size, a known system default is used.
     Setting this value too high has the same effect as disabling the stack size limit.
     Fibers use
     <!-- link TODO -->fiber.stack_size<!-- /link -->
     as maximum allowed stack size.
     An <classname>Error</classname> is thrown when the process call stack exceeds
     <!-- link TODO -->zend.max_allowed_stack_size-zend.reserved_stack_size<!-- /link-->
     bytes, to prevent stack-overflow-induced segmentation faults, with
     the goal of making debugging easier.
     The stack size increases during uncontrolled recursions involving internal functions
     or the magic methods
     <link linkend="object.tostring">__toString()</link>,
     <link linkend="object.clone">__clone()</link>,
     <link linkend="object.sleep">__sleep()</link>,
     <link linkend="object.destruct">__destruct()</link>.
     This is not related to stack buffer overflows, and is not a security feature.
    </para>
   </listitem>
   <listitem>
    <para>
     <!--<link linkend="ini.zend.reserved_stack_size">-->zend.reserved_stack_size<!--</link>-->
     is a new INI directive to set the reserved stack size, in bytes.
     This is subtracted from the max allowed stack size,
     as a buffer, when checking the stack size.
    </para>
   </listitem>
  </itemizedlist>
 </sect2>

 <sect2 xml:id="migration83.other-changes.performance">
  <title>Performance</title>

  <sect3 xml:id="migration83.other-changes.performance.dom">
   <title>DOM</title>

   <para>
    Looping over a <classname>DOMNodeList</classname> now uses caching. Therefore
    requesting items no longer takes quadratic time by default.
   </para>

   <para>
    Getting text content from nodes now avoids an allocation, resulting in a
    performance gain.
   </para>

   <para>
    <methodname>DOMChildNode::remove</methodname> now runs in O(1) performance.
   </para>
  </sect3>

  <sect3 xml:id="migration83.other-changes.performance.standard">
   <title>Standard</title>

   <para>
    The <function>file</function> flags error check is now about 7% faster.
   </para>
  </sect3>

  <sect3 xml:id="migration83.other-changes.performance.spl">
   <title>SPL</title>

   <para>
    <classname>RecursiveDirectoryIterator</classname> now performs less I/O
    when looping over a directory.
   </para>
  </sect3>
 </sect2>

</sect1>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
