<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: a9edd62d087ab1eb6292c795b7256e14ff9f1234 Maintainer: lhsazevedo Status: ready --><!-- CREDITS: fabioluciano,geekcom,lhsazevedo -->
<sect1 xml:id="language.oop5.anonymous" xmlns="http://docbook.org/ns/docbook">
 <title>Classes anônimas</title>

 <para>
  Classes anônimas são úteis quando objetos simples e descartáveis precisarem ser criados.
 </para>

 <informalexample>
  <programlisting role="php">
<![CDATA[
<?php

// Usando uma classe explícita
class Logger
{
    public function log($msg)
    {
        echo $msg;
    }
}

$util->setLogger(new Logger());

// Usando uma classe anônima
$util->setLogger(new class {
    public function log($msg)
    {
        echo $msg;
    }
});
]]>
  </programlisting>
 </informalexample>

 <para>
  Podem passar argumentos através de seus construtores, estender outras classes,
  implementar interfaces, e usar traits como uma classe normal faz:
 </para>

 <informalexample>
  <programlisting role="php">
<![CDATA[
<?php

class SomeClass {}
interface SomeInterface {}
trait SomeTrait {}

var_dump(new class(10) extends SomeClass implements SomeInterface {
    private $num;

    public function __construct($num)
    {
        $this->num = $num;
    }

    use SomeTrait;
});
]]>
  </programlisting>
  &example.outputs;
  <screen>
<![CDATA[
object(class@anonymous)#1 (1) {
  ["Command line code0x104c5b612":"class@anonymous":private]=>
  int(10)
}
]]>
  </screen>
 </informalexample>

 <para>
  Aninhar uma classe anônima dentro de outra classe não dá acesso a
  nenhum método privado ou protegido, ou propriedades da classe externa. Para
  utilizar os métodos e propriedades protegidas da classe externa, a classe anônima
  pode estender a classe externa. Para utilizar as propriedades privadas
  da classe externa na classe anônima, elas devem ser passadas através do
  construtor:
 </para>

 <informalexample>
  <programlisting role="php">
<![CDATA[
<?php

class Outer
{
    private $prop = 1;
    protected $prop2 = 2;

    protected function func1()
    {
        return 3;
    }

    public function func2()
    {
        return new class($this->prop) extends Outer {
            private $prop3;

            public function __construct($prop)
            {
                $this->prop3 = $prop;
            }

            public function func3()
            {
                return $this->prop2 + $this->prop3 + $this->func1();
            }
        };
    }
}

echo (new Outer)->func2()->func3();
]]>
  </programlisting>
  &example.outputs;
  <screen>
<![CDATA[
6
]]>
  </screen>
 </informalexample>

 <para>
  Todos os objetos criados pela mesma declaração de classe anônima são instâncias
  desta mesma classe.
 </para>

 <informalexample>
  <programlisting role="php">
<![CDATA[
<?php
function anonymous_class()
{
    return new class {};
}

if (get_class(anonymous_class()) === get_class(anonymous_class())) {
    echo 'same class';
} else {
    echo 'different class';
}]]>
  </programlisting>
  &example.outputs;
  <screen>
<![CDATA[
same class
]]>
  </screen>
 </informalexample>

 <note>
  <para>
   Classes anônimas tem nomes atribuídos automaticamente
   como demonstrado no exemplo a seguir. Este nome deve ser
   considerado apenas um detalhe não confiável na implementação.
  </para>
  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
echo get_class(new class {});
]]>
   </programlisting>
   &example.outputs.similar;
   <screen>
<![CDATA[
class@anonymous/in/oNi1A0x7f8636ad2021
]]>
   </screen>
  </informalexample>
 </note>
</sect1>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
